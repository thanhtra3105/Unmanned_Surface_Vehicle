let map;
let waypoints = [];
let markers = [];
let polyline = null;

function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 16.0659092, lng: 108.1609844 },
        zoom: 16,
    });

    map.addListener("click", (event) => {
        addWaypoint(event.latLng);
    });
}
function addWaypoint(location) {
    let idx = markers.length;

    let marker = new google.maps.Marker({
        position: location,
        map: map,
        label: `${idx + 1}`,
        draggable: true   // üî• Cho ph√©p k√©o marker
    });

    markers.push(marker);
    waypoints.push({
        lat: location.lat(),
        lng: location.lng(),
        speed: 1.0,
        hold_time: 2
    });

    // Khi k√©o xong th√¨ c·∫≠p nh·∫≠t l·∫°i waypoint
    marker.addListener("dragend", function(event) {
        let newPos = event.latLng;
        waypoints[idx].lat = newPos.lat();
        waypoints[idx].lng = newPos.lng();
        drawPolyline(); // v·∫Ω l·∫°i polyline
    });

    drawPolyline();
}

function drawPolyline() {
    if (polyline) {
        polyline.setMap(null); // x√≥a ƒë∆∞·ªùng c≈©
    }

    let path = waypoints.map(wp => ({ lat: wp.lat, lng: wp.lng }));

    polyline = new google.maps.Polyline({
        path: path,
        geodesic: true,
        strokeColor: "#FF0000",
        strokeOpacity: 1.0,
        strokeWeight: 2,
    });

    polyline.setMap(map);
}

function clearWaypoints() {
    markers.forEach(m => m.setMap(null));
    markers = [];
    waypoints = [];
    if (polyline) {
        polyline.setMap(null);
    }
}

function exportMission() {
    console.log(JSON.stringify({ mission: waypoints }, null, 2));
}

function updateProgress(percent, success=false) {
  const bar = document.getElementById("progress-bar");
  bar.style.width = percent + "%";
  if (success) {
    bar.style.background = "green"; // ‚úÖ th√†nh c√¥ng th√¨ ƒë·ªïi sang xanh
  } else {
    bar.style.background = "red";   // ‚ùå m·∫∑c ƒë·ªãnh ho·∫∑c th·∫•t b·∫°i l√† ƒë·ªè
  }
}

async function uploadMission() {
  const mission = waypoints.map(wp => ({
    lat: wp.lat,
    lng: wp.lng,
    speed: 1.0,
    hold_time: 2
  }));

  updateProgress(10); // b·∫Øt ƒë·∫ßu
  try {
    const res = await fetch("/upload-mission", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ mission })
    });
    const data = await res.json();

    if (data.success) {
      updateProgress(100, true); // üéâ full xanh khi th√†nh c√¥ng
    } else {
      updateProgress(100, false); // full ƒë·ªè n·∫øu th·∫•t b·∫°i
      alert("‚ùå Failed: " + data.message);
    }
  } catch (err) {
    updateProgress(100, false);
    alert("‚ö†Ô∏è Error: " + err);
  }
}


// =============================
// G·ªçi API ƒëi·ªÅu khi·ªÉn vehicle
// =============================
function armVehicle() {
  fetch("/arm", { method: "POST" })
    .then(res => res.json())
    .then(data => alert("üöÄ ARM: " + JSON.stringify(data)))
    .catch(err => alert("‚ùå ARM error: " + err));
}

function disarmVehicle() {
  fetch("/disarm", { method: "POST" })
    .then(res => res.json())
    .then(data => alert("üõë DISARM: " + JSON.stringify(data)))
    .catch(err => alert("‚ùå DISARM error: " + err));
}

function startMission() {
  fetch("/start-mission", { method: "POST" })
    .then(res => res.json())
    .then(data => alert("‚ñ∂Ô∏è Start Mission: " + JSON.stringify(data)))
    .catch(err => alert("‚ùå Start error: " + err));
}

vehicleMarker = null;

let boatIcon = {
  url: "/static/boat.png",   // icon thuy·ªÅn b·∫°n ƒë·ªÉ trong th∆∞ m·ª•c static
  scaledSize: new google.maps.Size(30, 30), // k√≠ch th∆∞·ªõc
  anchor: new google.maps.Point(20, 20)     // t√¢m icon n·∫±m ·ªü gi·ªØa
};

function updateVehiclePosition() {
  fetch("/vehicle-position")
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        const pos = { lat: data.lat, lng: data.lon };

        if (!vehicleMarker) {
          vehicleMarker = new google.maps.Marker({
            position: pos,
            map: map,
            icon: boatIcon,
            title: "USV Vehicle"
          });
        } else {
          vehicleMarker.setPosition(pos);
        }
      }
    })
    .catch(err => console.error("Position update failed:", err));
}

// g·ªçi update li√™n t·ª•c m·ªói 2 gi√¢y
setInterval(updateVehiclePosition, 2000);

// Kh·ªüi t·∫°o map khi load
window.onload = initMap;


